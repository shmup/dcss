#!/usr/bin/env bash

#   ████   helper script to launch consoles
#  █    █  run `crawl setup` to sync keys
#  █ ██ █  run `crawl help` to see usage
#  █ ████
#  █       http://crawl.develz.org/wordpress/howto
#   ████   https://asciinema.org/a/bAHcjKamF5tlpgukL2VpJbGBU
#
#   NOTE: I want to look into fonts to document
#         https://int10h.org/oldschool-pc-fonts/fontlist/?1#ibm-g2

declare -A servers
declare -A keys
servers=(
  ["cao"]="joshua@crawl.akrasiac.org"  # AZ,   .11+
  ["cko"]="terminal@crawl.kelbi.org"   # NY,   .21+
  ["cbro"]="crawler@cbro.berotato.org" # OH,   .24+
  ["cdo"]="crawl@crawl.develz.org"     # GER,  4.1.2a (Linley)
  ["cxc"]="crawl@crawl.xtahua.com"     # FRAN  Latest
)
keys=(
  ["cao_key"]="http://crawl.develz.org/cao_key"
  ["cbro_key"]="https://cbro.berotato.org/keys/cbro_key"
  ["cdo_key"]="http://crawl.develz.org/cao_key"
  ["cko_key"]="https://crawl.kelbi.org/crawl/cao_key"
  ["cue_key"]="http://crawl.develz.org/cao_key"
  ["cxc_key"]="http://crawl.develz.org/cao_key"
)

# 𝐂𝐎𝐋𝐎𝐑𝐈𝐙𝐄
display_colored_text() {
  local color=$1
  local text=$2
  case $color in
    "green") tput setaf 2 ;;
    *) tput setaf 1 ;;
  esac
  tput bold
  echo "$text"
  tput sgr0
}

# 𝐂𝐎𝐍𝐍𝐄𝐂𝐓
validate_and_ssh() {
  local key="$HOME/.ssh/${1}_key"
  local address=$2
  local port=22

  if [ -f "$key" ]; then
    TERM=xterm ssh -i "$key" "$address" -p "$port"
  else
    display_error_msg "SSH key $key not found"
    display_error_msg "Try running crawl --setup if you haven't"
    echo "SSH key $key not found, trying with password."
    TERM=xterm ssh "$address" -p "$port"
  fi
}

# 𝐒𝐘𝐍𝐂 𝐊𝐄𝐘𝐒
download_keys() {
  [ ! -d "$HOME/.ssh" ] && mkdir "$HOME/.ssh"
  [ "$(stat -c %a "$HOME/.ssh")" -lt 400 ] && chmod 400 "$HOME/.ssh"

  for key in "${!keys[@]}"; do
    if [ ! -f "$HOME/.ssh/$key" ]; then
      echo "Downloading $key"
      curl -o "$HOME/.ssh/$key" "${keys[$key]}" || {
        echo "Failed to download $key"
        exit 1
      }
    else
      echo "$key already exists"
    fi

    chmod 600 "$HOME/.ssh/$key"
  done

  echo "Keys setup complete"
}

# 𝐇𝐄𝐋𝐏
help() {
  echo "Usage: $0 [option]"
  echo
  echo "crawl options:"
  for server in "${!servers[@]}"; do
    echo -e "  $server\t\tconnect to $server"
  done
  echo -e "  tv\t\thttps://termcast.shalott.org/tv"
  echo
  echo "nethack options:"
  echo -e "  nao\t\tofficial"
  echo -e "  hdf\t\thas a ton of variants"
  echo
  echo "misc:"
  echo -e "  -s, --setup\tdownload and configure ssh keys"
  echo -e "  -h, --help\tshow this help message"
}

# 𝐌𝐀𝐈𝐍
while true; do
  # a mixture of array keys and manual echos
  [ $# -eq 0 ] && {
    server_keys=("${!servers[@]}")
    server_keys_joined=$(printf ", %s" "${server_keys[@]}")
    server_keys_joined=${server_keys_joined:2}
    display_colored_text "red" "xom smiles"
    echo
    printf "dcss: "; display_colored_text "green" "${server_keys_joined}, tv"
    printf "bcrawl: "; display_colored_text "green" "cue"
    printf "nethack: "; display_colored_text "green" "nao, hdf"
    printf "gnollhack: "; display_colored_text "green" "ghc"
    echo
    read -r -p "choice: " server
  } || server=$1
  shift

  # 𝐒𝐖𝐈𝐓𝐂𝐇
  case $server in
  "quit") ;;
  "setup" | "-s" | "--setup") download_keys;;
  "help" | "-h" | "--help") help;;
  "tv") telnet termcast.shalott.org;;
  "nao") ssh nethack@alt.org;;
  "cue") ssh -i ~/.ssh/cue_key terminal@underhound.eu -p 23;;
  "hdf")
    # Hardfought variants:
    # AceHack     FIQHack       NetHack    SlashTHEM dNetHack
    # GnollHack   NetHack Fourk SpliceHack DynaHack  GruntHack
    # notdNetHack SporkHack     EvilHack   Hack'EM   Slash'EM
    # UnNetHack   xNetHack      ZAPM
    ssh nethack@hardfought.org
    ;;
  *)
    if [[ -n "${servers[$server]}" ]]; then
      validate_and_ssh "$server" "${servers[$server]}"
    else
      display_colored_text "red" "Error: $1"
    fi
    ;;
  esac
  exit 0
done
